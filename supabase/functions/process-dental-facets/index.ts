import { WHITENING_PROMPT } from './whiteningPrompt.ts';

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

/**
 * ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
 * EDGE FUNCTION: PROCESSAMENTO DE AN√ÅLISE DENTAL (FACETAS + CLAREAMENTO)
 * ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
 * 
 * FASE 4: PROMPTS SEPARADOS POR TIPO DE TRATAMENTO
 * FASE 5: VALIDA√á√ÉO JSON CONTRA SCHEMA
 * 
 * FLUXO:
 * 
 * 1. AN√ÅLISE (action='analyze'):
 *    - Recebe treatment_type ('facetas' | 'clareamento')
 *    - Seleciona prompt apropriado
 *    - Gemini gera JSON estruturado conforme schema
 *    - Valida JSON contra interface AnaliseJSON
 *    - Retorna: { analise_data: {...}, metadata: {...} }
 * 
 * 2. GERA√á√ÉO (action='generate'):
 *    - Constr√≥i prompt de simula√ß√£o visual
 *    - Gemini gera imagem realista
 *    - Retorna: { processedImageBase64: "..." }
 * 
 * IMPORTANTE:
 * - Cada tipo de tratamento tem seu prompt otimizado
 * - JSON validado garante consist√™ncia de dados
 * ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
 */

// PATCH 5: Logger estruturado com run_id
function createLogger(runId: string) {
  const prefix = `[${runId.substring(0,8)}]`;
  
  return {
    info: (msg: string, ...args: any[]) => console.log(`${prefix} ‚ÑπÔ∏è  ${msg}`, ...args),
    success: (msg: string, ...args: any[]) => console.log(`${prefix} ‚úì ${msg}`, ...args),
    warn: (msg: string, ...args: any[]) => console.warn(`${prefix} ‚ö†Ô∏è  ${msg}`, ...args),
    error: (msg: string, ...args: any[]) => console.error(`${prefix} ‚ùå ${msg}`, ...args),
    debug: (msg: string, data: any) => console.log(`${prefix} üîç ${msg}`, JSON.stringify(data, null, 2))
  };
}

// PATCH 4: Calcular hash SHA256 do prompt
async function sha256(text: string): Promise<string> {
  const encoder = new TextEncoder();
  const data = encoder.encode(text);
  const hashBuffer = await crypto.subtle.digest('SHA-256', data);
  const hashArray = Array.from(new Uint8Array(hashBuffer));
  return hashArray.map(b => b.toString(16).padStart(2, '0')).join('');
}

const PROMPT_VERSION = '2.0'; // Incrementar quando mudar l√≥gica de scoring
const MODEL_NAME = 'google/gemini-2.5-flash';

/**
 * PATCH 3: Parser robusto e consciente de tipo de tratamento
 * Extrai informa√ß√µes das se√ß√µes "DENTES A SEREM TRATADOS" e "ESPECIFICA√á√ïES T√âCNICAS"
 * do relat√≥rio t√©cnico gerado pelo Gemini.
 */
function parseReport(report: string, treatment: 'facetas' | 'clareamento') {
  const result: { dentes_tratados: string[]; especificacoes: Record<string, string> } = {
    dentes_tratados: [],
    especificacoes: {},
  };
  
  if (!report || typeof report !== 'string') {
    console.warn('Relat√≥rio vazio ou inv√°lido');
    return result;
  }

  const text = report.replace(/\r/g, '');
  console.log(`üìÑ Parsing relat√≥rio (tipo: ${treatment}, tamanho: ${text.length} chars)`);
  
  // ========================================
  // EXTRA√á√ÉO DE DENTES (apenas para facetas)
  // ========================================
  if (treatment === 'facetas') {
    console.log('üîç Procurando se√ß√£o "DENTES A SEREM TRATADOS"...');
    
    // Busca flex√≠vel com sin√¥nimos
    const dentesRegex = /(?:DENTES?\s+(?:A\s+SEREM?\s+)?TRATADOS?|ELEMENTOS?\s+DENTAIS?|TEETH\s+TO\s+TREAT)([\s\S]*?)(?:ESPECIFICA[√áC][√ïO]ES|PLANEJAMENTO|$)/i;
    const dentesMatch = text.match(dentesRegex);
    
    if (dentesMatch) {
      const dentesSection = dentesMatch[1];
      console.log('‚úì Se√ß√£o de dentes encontrada');
      
      // C√≥digos FDI: (11), (21), etc.
      const teethRegex = /\((\d{2})\)/g;
      const teeth = [] as string[];
      let m;
      while ((m = teethRegex.exec(dentesSection)) !== null) {
        teeth.push(m[1]);
      }
      
      result.dentes_tratados = teeth;
      console.log(`‚úì Dentes FDI extra√≠dos: [${teeth.join(', ')}]`);
      
      if (teeth.length === 0) {
        console.warn('‚ö†Ô∏è Nenhum c√≥digo FDI encontrado na se√ß√£o');
      }
    } else {
      console.log('‚ÑπÔ∏è  Se√ß√£o de dentes n√£o encontrada (pode ser normal para clareamento)');
    }
  } else {
    console.log('‚ÑπÔ∏è  Tipo clareamento: pulando extra√ß√£o de dentes FDI');
  }
  
  // ========================================
  // EXTRA√á√ÉO DE ESPECIFICA√á√ïES (ambos os tipos)
  // ========================================
  console.log('üîç Procurando especifica√ß√µes t√©cnicas...');
  
  const specsRegex = /(?:ESPECIFICA[√áC][√ïO]ES?\s+T[√âE]CNICAS?|TECHNICAL\s+SPECS?|DETALHES\s+T[√âE]CNICOS?)([\s\S]*?)(?:PLANEJAMENTO|CUIDADOS|PROGN[√ìO]STICO|$)/i;
  const specsMatch = text.match(specsRegex);
  
  if (specsMatch) {
    const specsSection = specsMatch[1];
    console.log('‚úì Especifica√ß√µes encontradas');
    
    // Extrair pares chave:valor
    const lines = specsSection.split('\n').filter(l => l.trim());
    for (const line of lines) {
      const kvMatch = line.match(/^([^:]+):\s*(.+)$/);
      if (kvMatch) {
        const key = kvMatch[1].trim().toLowerCase().replace(/\s+/g, '_');
        const value = kvMatch[2].trim();
        result.especificacoes[key] = value;
      }
    }
    console.log(`‚úì ${Object.keys(result.especificacoes).length} especifica√ß√µes extra√≠das`);
  } else {
    console.log(`‚ÑπÔ∏è  Especifica√ß√µes n√£o encontradas (normal para ${treatment})`);
  }
  
  console.log('üìä Parsing conclu√≠do');
  return result;
}

/**
 * Retorna descri√ß√£o personalizada da cor baseada no c√≥digo Vita e tom de pele
 */
function getColorDescription(colorCode: string, skinTone: string): string {
  const code = colorCode.toUpperCase().trim();
  const tone = skinTone.toLowerCase();
  
  const descriptions: Record<string, Record<string, string>> = {
    'BL1': {
      'clara': 'Very bright cool white, ideal for fair complexion - creates striking contrast',
      'm√©dia': 'Very bright cool white - bold choice for confident smile',
      'morena': 'Very bright cool white - creates dramatic Hollywood effect',
      'escura': 'Very bright cool white - stunning contrast with darker complexion'
    },
    'BL2': {
      'clara': 'Bright cool white, natural-looking for fair skin',
      'm√©dia': 'Bright cool white, universally flattering',
      'morena': 'Bright cool white - elegant and modern',
      'escura': 'Bright cool white - beautiful contrast'
    },
    'A1': {
      'clara': 'Natural white with neutral undertone - timeless elegance for fair skin',
      'm√©dia': 'Natural white, neutral undertone - universally flattering choice',
      'morena': 'Natural white - fresh and confident look',
      'escura': 'Natural white - harmonious and professional'
    },
    'A2': {
      'clara': 'Warm natural white - soft and elegant',
      'm√©dia': 'Warm natural white - naturally beautiful',
      'morena': 'Warm natural white - perfect harmony with medium-dark skin',
      'escura': 'Warm natural white - ideal balance for darker complexion'
    },
    'A3': {
      'clara': 'Warm ivory white - natural warmth',
      'm√©dia': 'Warm ivory white - naturally warm and inviting',
      'morena': 'Warm ivory white - beautifully harmonious',
      'escura': 'Warm ivory white - perfect harmony with darker skin tone'
    },
    'A3.5': {
      'clara': 'Warm beige-white - subtle warmth',
      'm√©dia': 'Warm beige-white - natural and understated',
      'morena': 'Warm beige-white - natural harmony',
      'escura': 'Warm beige-white - harmonious with darker complexion'
    },
    'B1': {
      'clara': 'Cool neutral white - fresh and clean for fair skin',
      'm√©dia': 'Cool neutral white - universally attractive',
      'morena': 'Cool neutral white - modern elegance',
      'escura': 'Cool neutral white - refined contrast'
    },
    'B2': {
      'clara': 'Soft neutral white - gentle elegance',
      'm√©dia': 'Soft neutral white - naturally balanced',
      'morena': 'Soft neutral white - subtle sophistication',
      'escura': 'Soft neutral white - elegant harmony'
    }
  };
  
  const toneKey = tone.includes('clara') ? 'clara' : 
                  tone.includes('m√©dia') || tone.includes('media') ? 'm√©dia' :
                  tone.includes('morena') ? 'morena' : 'escura';
  
  return descriptions[code]?.[toneKey] || 
         descriptions['A1']?.[toneKey] || 
         'Natural white shade that complements your complexion beautifully';
}

/**
 * ‚úÖ NOVO: Prompt de simula√ß√£o conservador BL2-BL4
 * Constr√≥i o prompt para gera√ß√£o de imagem respeitando servi√ßos ativos e faixa crom√°tica
 */
function buildSimulationPrompt(
  analiseJSON: any,
  servicos_ativos: string[],
  beforeImageRef: string
): string {
  return `
Voc√™ √© um assistente de design de sorriso. Gere uma imagem simulada realista do "depois" com base na foto "antes" (${beforeImageRef}) e nos dados de "analiseJSON".

REGRAS DE RENDERIZA√á√ÉO:
- **Preserve** identidade, √¢ngulo de c√¢mera, express√£o, pele, olhos e ilumina√ß√£o.
- **Modifique apenas os dentes**: forma, microalinhamento e cor segundo o plano.
- **Cor final na escala Vita**: **SEMPRE BL2 (obrigat√≥rio)**.
  - N√ÉO use BL1, BL3, BL4 ou qualquer outra cor.
- **Servi√ßos ativos**: aplique **apenas** procedimentos presentes em ${JSON.stringify(servicos_ativos)}.
- Se "quantidade_facetas" for 2 ou 4, **inclua clareamento** dos demais dentes para uniformizar com a cor das facetas (etapa pr√©via).
- **Propor√ß√£o da imagem** deve ser preservada (sem distor√ß√µes ou crop agressivo).
- Resultado deve ser **natural e plaus√≠vel** (sem brilho artificial excessivo, sem "Hollywood smile").

PLANOS T√çPICOS:
- 0 facetas ‚Üí somente clareamento (uniformizar cor para **BL2**).
- 2 facetas (11 e 21) ‚Üí harmonizar forma/cor desses dentes; clarear os demais para igualar (**BL2**).
- 4 facetas (11, 12, 21, 22) ‚Üí harmonizar forma/cor nesses; clarear demais dentes (**BL2**).
- 6 facetas (13‚Äì23) ‚Üí harmonizar frente superior; ajustar tom geral para (**BL2**).

DADOS RECEBIDOS:
- quantidade_facetas: ${String(analiseJSON?.quantidade_facetas ?? analiseJSON?.recomendacao_tratamento?.quantidade_facetas ?? 0)}
- dentes_tratados: ${JSON.stringify(analiseJSON?.dentes_tratados ?? analiseJSON?.recomendacao_tratamento?.dentes_fdi_tratados ?? [])}
- cor_recomendada: BL2 (PADR√ÉO FIXO)
- procedimentos_recomendados: ${JSON.stringify(analiseJSON?.procedimentos_recomendados ?? [])}

SA√çDA:
- Retorne **apenas** a imagem simulada final (ex.: JPEG base64) sem legendas ou texto.
`;
}

/**
 * ‚úÖ FASE 2: GERADOR DE RELAT√ìRIO T√âCNICO EM TEXTO COM PONTUA√á√ÉO QUANTITATIVA
 * Converte JSON estruturado com pontua√ß√£o cl√≠nica em relat√≥rio narrativo profissional
 */
function generateTextReportFromJSON(
  analiseJSON: any,
  servicosAtivos: Array<{ name: string; category: string; price: number }>
): string {
  const sections: string[] = [];
  const analise = analiseJSON.analise || analiseJSON;

  // 1. AN√ÅLISE CL√çNICA INICIAL
  sections.push("‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê");
  sections.push("AN√ÅLISE CL√çNICA INICIAL");
  sections.push("‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n");
  
  sections.push(`Tom de pele: ${analise.tom_pele || 'N√£o especificado'}`);
  sections.push(`Cor dos olhos: ${analise.cor_olhos || 'N√£o especificado'}\n`);
  
  // 2. AVALIA√á√ÉO QUANTITATIVA (NOVO)
  if (analise.estado_geral) {
    const eg = analise.estado_geral;
    
    sections.push("‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê");
    sections.push("AVALIA√á√ÉO QUANTITATIVA");
    sections.push("‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n");
    
    sections.push(`1. Alinhamento: ${(eg.alinhamento || 'N/A').toUpperCase()} (${eg.alinhamento_pontos || 0} pontos)`);
    sections.push(`   ‚îî‚îÄ ${eg.alinhamento_detalhes || 'Sem detalhes'}\n`);
    
    sections.push(`2. Propor√ß√£o: ${(eg.proporcao || 'N/A').toUpperCase()} (${eg.proporcao_pontos || 0} pontos)`);
    sections.push(`   ‚îî‚îÄ ${eg.proporcao_detalhes || 'Sem detalhes'}\n`);
    
    sections.push(`3. Forma: ${(eg.forma || 'N/A').toUpperCase()} (${eg.forma_pontos || 0} pontos)`);
    sections.push(`   ‚îî‚îÄ ${eg.forma_detalhes || 'Sem detalhes'}\n`);
    
    sections.push(`4. Integridade: ${(eg.integridade || 'N/A').toUpperCase()} (${eg.integridade_pontos || 0} pontos)`);
    sections.push(`   ‚îî‚îÄ ${eg.integridade_detalhes || 'Sem detalhes'}\n`);
    
    sections.push(`5. Cor: ${(eg.cor || 'N/A').toUpperCase()} (${eg.cor_pontos || 0} pontos)`);
    sections.push(`   ‚îî‚îÄ ${eg.cor_detalhes || 'Sem detalhes'}\n`);
    
    sections.push(`6. Linha Gengival: ${(eg.linha_gengival || 'N/A').toUpperCase()}`);
    sections.push(`   ‚îî‚îÄ ${eg.linha_gengival_detalhes || 'Sem detalhes'}\n`);
    
    sections.push(`‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ`);
    sections.push(`üìä PONTUA√á√ÉO TOTAL: ${eg.pontuacao_total || 0} pontos`);
    sections.push(`üìã INTERPRETA√á√ÉO: ${eg.interpretacao || '0-2: Clareamento | 3-4: Avaliar | 5+: Facetas'}\n`);
  }

  // 3. DECIS√ÉO CL√çNICA (NOVO)
  if (analise.decisao_clinica) {
    const dc = analise.decisao_clinica;
    
    sections.push("‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê");
    sections.push("DECIS√ÉO CL√çNICA");
    sections.push("‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n");
    
    sections.push(`Conduta: ${(dc.conducta || 'N√ÉO ESPECIFICADA').toUpperCase()}\n`);
    sections.push(`Justificativa T√©cnica:`);
    sections.push(`${dc.justificativa_tecnica || 'N√£o fornecida'}\n`);
    
    if (dc.quantidade_facetas > 0) {
      sections.push(`Quantidade de facetas: ${dc.quantidade_facetas}`);
      sections.push(`Dentes a serem tratados: ${dc.dentes_tratados?.join(', ') || 'N√£o especificado'}\n`);
      
      if (dc.dentes_justificativa) {
        sections.push(`Justificativa por dente:`);
        sections.push(`${dc.dentes_justificativa}\n`);
      }
    }
  }

  // 4. DETALHAMENTO POR DENTE (NOVO - apenas se houver facetas)
  if (analise.detalhamento_por_dente && Object.keys(analise.detalhamento_por_dente).length > 0) {
    sections.push("‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê");
    sections.push("DETALHAMENTO POR DENTE");
    sections.push("‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n");
    
    const dentes = ['11', '21', '12', '22', '13', '23'];
    dentes.forEach(dente => {
      const det = analise.detalhamento_por_dente[dente];
      if (det && det.problemas && det.problemas.length > 0) {
        sections.push(`Dente ${dente}:`);
        sections.push(`  Problemas: ${det.problemas.join(', ')}`);
        sections.push(`  Faceta necess√°ria: ${det.necessita_faceta ? 'SIM' : 'N√ÉO'}`);
        if (det.justificativa) {
          sections.push(`  Justificativa: ${det.justificativa}`);
        }
        sections.push('');
      }
    });
  }

  // 5. PROCEDIMENTOS RECOMENDADOS
  if (analise.procedimentos_recomendados && analise.procedimentos_recomendados.length > 0) {
    sections.push("‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê");
    sections.push("PROCEDIMENTOS RECOMENDADOS");
    sections.push("‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n");
    
    analise.procedimentos_recomendados.forEach((proc: string, index: number) => {
      sections.push(`${index + 1}. ${proc}`);
    });
    sections.push("");
  }

  // 6. ESPECIFICA√á√ïES T√âCNICAS
  sections.push("‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê");
  sections.push("ESPECIFICA√á√ïES T√âCNICAS");
  sections.push("‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n");
  
  sections.push(`Cor final recomendada: ${analise.cor_recomendada || 'BL2'} (escala Vita)`);
  sections.push(`Protocolo: Padr√£o da cl√≠nica para resultados harmoniosos\n`);
  
  // Detectar tipo de faceta nos servi√ßos ativos (apenas se houver facetas)
  const quantidadeFacetas = analise.decisao_clinica?.quantidade_facetas || analise.quantidade_facetas || 0;
  if (quantidadeFacetas > 0) {
    const tipoFaceta = servicosAtivos.find(s => 
      s.name.toLowerCase().includes('porcelana') || 
      s.name.toLowerCase().includes('cer√¢mica')
    ) ? 'Cer√¢mica/Porcelana' : 'Resina composta';
    
    sections.push(`Material: ${tipoFaceta}`);
    sections.push("T√©cnica: Minimamente invasiva com preserva√ß√£o dental");
    sections.push("Preparo: Conservador com manuten√ß√£o da estrutura dent√°ria\n");
  }

  // 3. PROCEDIMENTOS RECOMENDADOS
  if (analiseJSON.procedimentos_recomendados && analiseJSON.procedimentos_recomendados.length > 0) {
    sections.push("‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê");
    sections.push("PROCEDIMENTOS RECOMENDADOS");
    sections.push("‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n");
    
    analiseJSON.procedimentos_recomendados.forEach((proc: string, index: number) => {
      sections.push(`${index + 1}. ${proc}`);
    });
    sections.push("");
  }

  // 4. ESPECIFICA√á√ïES T√âCNICAS (quando h√° facetas)
  if (analiseJSON.quantidade_facetas > 0) {
    sections.push("‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê");
    sections.push("ESPECIFICA√á√ïES T√âCNICAS");
    sections.push("‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n");
    
    // Detectar tipo de faceta nos servi√ßos ativos
    const tipoFaceta = servicosAtivos.find(s => 
      s.name.toLowerCase().includes('porcelana') || 
      s.name.toLowerCase().includes('cer√¢mica')
    ) ? 'Cer√¢mica/Porcelana' : 'Resina composta';
    
    sections.push(`Material: ${tipoFaceta}`);
    sections.push(`Cor: ${analiseJSON.cor_recomendada} (Vita)`);
    sections.push("T√©cnica: Minimamente invasiva com preserva√ß√£o dental");
    sections.push("Preparo: Conservador com manuten√ß√£o da estrutura dent√°ria\n");
  }

  // 5. PLANEJAMENTO DO TRATAMENTO
  sections.push("‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê");
  sections.push("PLANEJAMENTO DO TRATAMENTO");
  sections.push("‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n");
  
  let etapa = 1;
  
  // Etapa 1: Consulta inicial (sempre)
  sections.push(`Etapa ${etapa}: Consulta de avalia√ß√£o e planejamento digital`);
  etapa++;
  
  // Etapa 2: Clareamento (se recomendado)
  if (analiseJSON.procedimentos_recomendados?.some((p: string) => p.toLowerCase().includes('clarear'))) {
    sections.push(`Etapa ${etapa}: Clareamento dental ${analiseJSON.quantidade_facetas > 0 ? '(pr√©-facetas)' : ''}`);
    etapa++;
  }
  
  // Etapa 3: Gengivoplastia (se recomendado)
  if (analiseJSON.procedimentos_recomendados?.some((p: string) => p.toLowerCase().includes('gengivo'))) {
    sections.push(`Etapa ${etapa}: Gengivoplastia (contorno gengival)`);
    etapa++;
  }
  
  // Etapa 4: Facetas (se recomendado)
  if (analiseJSON.quantidade_facetas > 0) {
    sections.push(`Etapa ${etapa}: Confec√ß√£o e instala√ß√£o das facetas`);
    etapa++;
  }
  
  // Etapa 5: Ajustes e polimento final
  sections.push(`Etapa ${etapa}: Ajustes finais e polimento\n`);

  // 6. CUIDADOS P√ìS-PROCEDIMENTO
  sections.push("‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê");
  sections.push("CUIDADOS P√ìS-PROCEDIMENTO");
  sections.push("‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n");
  sections.push("- Higiene oral rigorosa com escova√ß√£o 3x ao dia");
  sections.push("- Uso de fio dental diariamente");
  sections.push("- Evitar alimentos muito duros nas primeiras semanas");
  if (analiseJSON.procedimentos_recomendados?.some((p: string) => p.toLowerCase().includes('clarear'))) {
    sections.push("- Evitar alimentos/bebidas pigmentados por 48h ap√≥s clareamento");
  }
  sections.push("- Consultas de acompanhamento semestrais\n");

  // 7. PROGN√ìSTICO
  sections.push("‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê");
  sections.push("PROGN√ìSTICO E DURABILIDADE");
  sections.push("‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n");
  
  if (analiseJSON.quantidade_facetas > 0) {
    sections.push("Com cuidados adequados, facetas de cer√¢mica/resina possuem durabilidade m√©dia de 10-15 anos.");
  } else {
    sections.push("Clareamento dental possui dura√ß√£o m√©dia de 1-3 anos, dependendo dos h√°bitos alimentares.");
  }
  sections.push("Progn√≥stico: Excelente, com resultados est√©ticos naturais e harmoniosos.\n");

  // 8. OBSERVA√á√ïES IMPORTANTES
  sections.push("‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê");
  sections.push("OBSERVA√á√ïES IMPORTANTES");
  sections.push("‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n");
  sections.push("- Este relat√≥rio √© baseado em an√°lise fotogr√°fica preliminar");
  sections.push("- Avalia√ß√£o cl√≠nica presencial √© obrigat√≥ria antes do in√≠cio do tratamento");
  sections.push("- Radiografias e exames complementares podem ser necess√°rios");
  sections.push("- O plano de tratamento pode ser ajustado ap√≥s avalia√ß√£o presencial");

  return sections.join("\n");
}

/**
 * ‚úÖ FASE 1: Prompt de an√°lise com sistema de pontua√ß√£o cl√≠nica quantitativa
 * Sistema baseado em crit√©rios num√©ricos objetivos (mm, graus, %) para decis√µes consistentes
 */
function buildAnalysisPrompt(
  analiseJSON: any,
  servicos_ativos: string[]
): string {
  return `
Voc√™ √© um dentista especialista em odontologia est√©tica com forma√ß√£o em Ortodontia e Pr√≥tese.
Sua an√°lise DEVE ser baseada em CRIT√âRIOS T√âCNICOS OBJETIVOS e EVID√äNCIAS FOTOGR√ÅFICAS.

‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
üéØ SISTEMA DE DECIS√ÉO CL√çNICA - CRIT√âRIOS QUANTITATIVOS OBRIGAT√ìRIOS
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

METODOLOGIA DE AVALIA√á√ÉO (3 ETAPAS):

ETAPA 1: AN√ÅLISE QUANTITATIVA POR CATEGORIA
ETAPA 2: PONTUA√á√ÉO DE SEVERIDADE
ETAPA 3: DECIS√ÉO BASEADA EM EVID√äNCIAS

‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
ETAPA 1: CRIT√âRIOS QUANTITATIVOS DE AVALIA√á√ÉO
‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

Para CADA categoria abaixo, classifique como NORMAL, LEVE ou SEVERO:

üî∏ CATEGORIA 1: ALINHAMENTO (Rota√ß√µes e Posi√ß√£o)

NORMAL (0 pontos):
‚Ä¢ Rota√ß√µes ‚â§ 10¬∞ em qualquer dente
‚Ä¢ Proje√ß√£o/recuo ‚â§ 1mm em rela√ß√£o ao arco
‚Ä¢ Sem sobreposi√ß√µes vis√≠veis
‚Ä¢ Linha incisal harmoniosa

LEVE (1 ponto):
‚Ä¢ Rota√ß√µes entre 10-20¬∞ em 1-2 dentes
‚Ä¢ Proje√ß√£o/recuo entre 1-2mm
‚Ä¢ Leve assimetria no arco (n√£o impacta fun√ß√£o)

SEVERO (3 pontos): ‚Üê INDICA FACETAS
‚Ä¢ Rota√ß√µes > 20¬∞ em qualquer dente
‚Ä¢ Proje√ß√£o/recuo > 2mm (dente visivelmente "para dentro" ou "para fora")
‚Ä¢ Sobreposi√ß√µes dent√°rias
‚Ä¢ Caninos projetados > 2mm para fora do arco

üî∏ CATEGORIA 2: PROPOR√á√ÉO E SIMETRIA

NORMAL (0 pontos):
‚Ä¢ Laterais (12/22): diferen√ßa de tamanho ‚â§ 10%
‚Ä¢ Centrais (11/21): diferen√ßa de tamanho ‚â§ 5%
‚Ä¢ Propor√ß√£o largura/altura: 75-85%
‚Ä¢ Simetria bilateral preservada

LEVE (1 ponto):
‚Ä¢ Laterais: diferen√ßa 10-20%
‚Ä¢ Centrais: diferen√ßa 5-15%
‚Ä¢ Assimetria percept√≠vel mas n√£o grotesca

SEVERO (3 pontos): ‚Üê INDICA FACETAS
‚Ä¢ Laterais: diferen√ßa > 20% (um visivelmente menor)
‚Ä¢ Centrais: diferen√ßa > 15%
‚Ä¢ Um lateral claramente menor/maior que o contralateral
‚Ä¢ Despropor√ß√£o que compromete harmonia do sorriso

üî∏ CATEGORIA 3: FORMA DENT√ÅRIA

NORMAL (0 pontos):
‚Ä¢ Forma retangular-ovalada adequada
‚Ä¢ Bordas incisais √≠ntegras
‚Ä¢ √Çngulos preservados
‚Ä¢ Anatomia dental harmoniosa

LEVE (1 ponto):
‚Ä¢ Desgaste incisal leve (< 1mm)
‚Ä¢ Pequenas irregularidades nas bordas
‚Ä¢ Forma levemente triangular nos laterais

SEVERO (3 pontos): ‚Üê INDICA FACETAS
‚Ä¢ Desgaste incisal > 2mm (borda plana/irregular)
‚Ä¢ Dentes excessivamente triangulares (formato "ponta")
‚Ä¢ Fraturas vis√≠veis em esmalte
‚Ä¢ Forma inadequada para a face do paciente

üî∏ CATEGORIA 4: INTEGRIDADE ESTRUTURAL

NORMAL (0 pontos):
‚Ä¢ Sem restaura√ß√µes vis√≠veis
‚Ä¢ Esmalte √≠ntegro
‚Ä¢ Sem diastemas
‚Ä¢ Estrutura preservada

LEVE (1 ponto):
‚Ä¢ Pequenas restaura√ß√µes em resina (< 30% da face vestibular)
‚Ä¢ Diastema < 1mm
‚Ä¢ Manchas leves de fluorose

SEVERO (3 pontos): ‚Üê INDICA FACETAS
‚Ä¢ Restaura√ß√µes extensas (> 30% da face vestibular)
‚Ä¢ Manchas ao redor de restaura√ß√µes
‚Ä¢ Diastemas > 1.5mm entre incisivos centrais
‚Ä¢ Fraturas de esmalte
‚Ä¢ M√∫ltiplas restaura√ß√µes com cores diferentes

üî∏ CATEGORIA 5: COR DENT√ÅRIA

NORMAL (0 pontos):
‚Ä¢ Cor UNIFORME entre todos os dentes
‚Ä¢ Tom entre A2-A3.5 (natural)
‚Ä¢ Sem manchas ou descolora√ß√µes
‚Ä¢ Translucidez incisal preservada

LEVE (1 ponto):
‚Ä¢ Cor UNIFORME mas amarelada (A3.5-B3)
‚Ä¢ Leve varia√ß√£o de tom (< 1 shade entre dentes)
‚Ä¢ Clareamento resolve completamente

SEVERO (3 pontos): ‚Üê INDICA FACETAS
‚Ä¢ Cor DESUNIFORME entre dentes (‚â• 2 shades de diferen√ßa)
‚Ä¢ Centrais claros (A1) + laterais amarelos (A3.5) = "efeito chiclete"
‚Ä¢ Manchas brancas/marrons em esmalte
‚Ä¢ Restaura√ß√µes com cor diferente dos dentes
‚Ä¢ Cor UNIFORME s√≥ resolve com facetas + clareamento conjunto

üî∏ CATEGORIA 6: LINHA GENGIVAL E SORRISO GENGIVAL

NORMAL (0 pontos):
‚Ä¢ Exposi√ß√£o gengival ‚â§ 2mm ao sorrir
‚Ä¢ Linha gengival sim√©trica
‚Ä¢ Contorno harm√¥nico

LEVE (1 ponto):
‚Ä¢ Exposi√ß√£o gengival 2-3mm
‚Ä¢ Leve assimetria (< 1mm de diferen√ßa)

SEVERO (2 pontos): ‚Üê INDICA GENGIVOPLASTIA (n√£o facetas)
‚Ä¢ Exposi√ß√£o gengival > 3mm (sorriso gengival)
‚Ä¢ Assimetria > 1mm
‚Ä¢ Obs: Gengivoplastia √© procedimento COMPLEMENTAR

‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
ETAPA 2: SISTEMA DE PONTUA√á√ÉO
‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

Some os pontos de TODAS as categorias (exceto categoria 6):

PONTUA√á√ÉO TOTAL = Œ£ (categorias 1-5)

M√°ximo poss√≠vel: 15 pontos (3 √ó 5 categorias)

‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
ETAPA 3: DECIS√ÉO CL√çNICA BASEADA NA PONTUA√á√ÉO
‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

üìä INTERPRETA√á√ÉO DA PONTUA√á√ÉO:

0-2 PONTOS ‚Üí APENAS CLAREAMENTO ‚úÖ
‚îú‚îÄ Estrutura dental EXCELENTE
‚îú‚îÄ Alinhamento, propor√ß√£o e forma adequados
‚îú‚îÄ Problema principal (se houver): cor uniforme amarelada
‚îî‚îÄ Conduta: Clareamento dental resolve

3-4 PONTOS ‚Üí AVALIAR CASO A CASO ‚ö†Ô∏è
‚îú‚îÄ Se problema √öNICO for COR DESUNIFORME ‚Üí Facetas seletivas
‚îú‚îÄ Se problema PRINCIPAL for ESTRUTURAL ‚Üí Facetas
‚îú‚îÄ Se problemas LEVES m√∫ltiplos ‚Üí Considerar clareamento primeiro
‚îî‚îÄ Use bom senso cl√≠nico

5+ PONTOS ‚Üí FACETAS INDICADAS ‚úÖ
‚îú‚îÄ M√∫ltiplos fatores comprometidos
‚îú‚îÄ OU √∫nico fator SEVERAMENTE comprometido
‚îú‚îÄ Facetas s√£o necessidade cl√≠nica (n√£o est√©tica)
‚îî‚îÄ Clareamento isolado N√ÉO resolve

‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
üìã EXEMPLOS PR√ÅTICOS DE APLICA√á√ÉO
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

CASO 1: Apenas dentes amarelados uniformes
‚îú‚îÄ Alinhamento: NORMAL (0 pontos)
‚îú‚îÄ Propor√ß√£o: NORMAL (0 pontos)
‚îú‚îÄ Forma: NORMAL (0 pontos)
‚îú‚îÄ Integridade: NORMAL (0 pontos)
‚îú‚îÄ Cor: LEVE - amarelado uniforme (1 ponto)
‚îî‚îÄ TOTAL: 1 ponto ‚Üí CLAREAMENTO

CASO 2: Dente 12 recuado + laterais pequenos
‚îú‚îÄ Alinhamento: SEVERO - dente 12 recuado 2.5mm (3 pontos)
‚îú‚îÄ Propor√ß√£o: SEVERO - 12 √© 25% menor que 22 (3 pontos)
‚îú‚îÄ Forma: NORMAL (0 pontos)
‚îú‚îÄ Integridade: NORMAL (0 pontos)
‚îú‚îÄ Cor: LEVE - uniforme amarelado (1 ponto)
‚îî‚îÄ TOTAL: 7 pontos ‚Üí 4 FACETAS (11,21,12,22) + clareamento demais

CASO 3: Centrais com restaura√ß√µes + laterais amarelos
‚îú‚îÄ Alinhamento: NORMAL (0 pontos)
‚îú‚îÄ Propor√ß√£o: LEVE - pequena assimetria (1 ponto)
‚îú‚îÄ Forma: NORMAL (0 pontos)
‚îú‚îÄ Integridade: SEVERO - restaura√ß√µes extensas em 11,21 (3 pontos)
‚îú‚îÄ Cor: SEVERO - centrais A1, laterais A3.5 (3 pontos)
‚îî‚îÄ TOTAL: 7 pontos ‚Üí 4 FACETAS + clareamento dos caninos

‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
ü¶∑ QUANTIDADE DE FACETAS - CRIT√âRIOS T√âCNICOS
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

0 FACETAS (Apenas Clareamento):
‚úÖ Pontua√ß√£o total: 0-2 pontos
‚úÖ Estrutura dental excelente
‚úÖ √önico problema: cor uniforme (se houver)

2 FACETAS (Incisivos Centrais: 11, 21):
‚úÖ Pontua√ß√£o ‚â• 5 E problemas CONCENTRADOS em 11 e 21
‚úÖ Exemplos:
   - Restaura√ß√µes extensas apenas em 11 e 21
   - Fraturas apenas em centrais
   - Centrais com forma inadequada + laterais OK

4 FACETAS (Incisivos: 11, 21, 12, 22):
‚úÖ Pontua√ß√£o ‚â• 5 E problemas nos INCISIVOS
‚úÖ Exemplos:
   - Cor desuniforme: centrais claros + laterais escuros
   - Dente 12 recuado + assimetria 12 vs 22
   - Forma inadequada em m√∫ltiplos incisivos
   - Restaura√ß√µes em incisivos

6 FACETAS (Arco anterior: 13, 12, 11, 21, 22, 23):
‚úÖ Pontua√ß√£o ‚â• 8 E problemas INCLUEM caninos
‚úÖ Exemplos:
   - Caninos projetados/rotacionados (>2mm ou >20¬∞)
   - Caninos com forma inadequada
   - Cor desuniforme envolvendo caninos
   - Problemas estruturais em toda arcada anterior

‚ö†Ô∏è REGRA CR√çTICA: NUNCA recomende 6 facetas por "padr√£o est√©tico"
S√≥ recomende 6 se caninos tiverem problemas QUANTIFIC√ÅVEIS

‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
üé® COR RECOMENDADA - SEMPRE BL2 (PADR√ÉO DA CL√çNICA)
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

Independente do resultado da an√°lise:
‚Ä¢ cor_recomendada: "BL2" (FIXO)
‚Ä¢ Justificativa: Protocolo padr√£o da cl√≠nica para resultados harmoniosos

‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
üì§ FORMATO DE RESPOSTA - APENAS JSON V√ÅLIDO
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

Retorne APENAS este JSON (sem tags, sem markdown, sem texto adicional):

{
  "analise": {
    "tom_pele": "clara|m√©dia|morena|escura",
    "cor_olhos": "claros|m√©dios|escuros",
    
    "estado_geral": {
      "alinhamento": "normal|leve|severo",
      "alinhamento_pontos": 0|1|3,
      "alinhamento_detalhes": "Rota√ß√µes <10¬∞ em todos os dentes",
      
      "proporcao": "normal|leve|severo",
      "proporcao_pontos": 0|1|3,
      "proporcao_detalhes": "Laterais 12=22, diferen√ßa <5%",
      
      "forma": "normal|leve|severo",
      "forma_pontos": 0|1|3,
      "forma_detalhes": "Forma retangular adequada, sem desgastes",
      
      "integridade": "normal|leve|severo",
      "integridade_pontos": 0|1|3,
      "integridade_detalhes": "Esmalte √≠ntegro, sem restaura√ß√µes",
      
      "cor": "normal|leve|severo",
      "cor_pontos": 0|1|3,
      "cor_detalhes": "Cor uniforme A3 em todos os dentes",
      
      "linha_gengival": "normal|leve|severo",
      "linha_gengival_detalhes": "Exposi√ß√£o <2mm, sim√©trica",
      
      "pontuacao_total": 0,
      "interpretacao": "0-2: Clareamento | 3-4: Avaliar | 5+: Facetas"
    },
    
    "decisao_clinica": {
      "conducta": "clareamento|facetas|facetas+clareamento",
      "justificativa_tecnica": "Pontua√ß√£o total: 1 ponto. Estrutura dental excelente (alinhamento, propor√ß√£o, forma adequados). √önico problema: cor uniforme amarelada A3. Clareamento resolve completamente.",
      "quantidade_facetas": 0|2|4|6,
      "dentes_tratados": [],
      "dentes_justificativa": "Para cada dente, explique o problema quantificado"
    },
    
    "procedimentos_recomendados": [
      "Clareamento Dental",
      "Facetas de Porcelana",
      "Gengivoplastia"
    ],
    
    "cor_recomendada": "BL2",
    
    "detalhamento_por_dente": {
      "11": {
        "problemas": ["restaura√ß√£o extensa 40%", "cor A1 (desuniforme)"],
        "necessita_faceta": true|false,
        "justificativa": "Restaura√ß√£o >30% + cor 2 shades mais clara"
      },
      "12": {
        "problemas": ["recuado 2.5mm", "25% menor que dente 22"],
        "necessita_faceta": true|false,
        "justificativa": "Recuo >2mm + assimetria >20%"
      }
    }
  }
}

‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
‚úÖ CHECKLIST FINAL - ANTES DE GERAR A RESPOSTA
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

‚ñ° Avaliei CADA categoria com crit√©rios quantitativos?
‚ñ° Calculei a pontua√ß√£o TOTAL honestamente?
‚ñ° A decis√£o est√° ALINHADA com a pontua√ß√£o?
‚ñ° Justifiquei com DADOS num√©ricos (mm, graus, %)?
‚ñ° Se indiquei facetas, pontua√ß√£o ‚â•5?
‚ñ° Se indiquei clareamento, pontua√ß√£o ‚â§2?
‚ñ° Quantidade de facetas est√° JUSTIFICADA dente a dente?
‚ñ° Cor recomendada √© BL2?
‚ñ° JSON est√° v√°lido (sem markdown, sem tags)?

Servi√ßos dispon√≠veis: ${JSON.stringify(servicos_ativos)}

Gere o JSON de an√°lise agora:`;
}

// Prompt est√°tico (ser√° substitu√≠do pelo din√¢mico)
const ANALYSIS_PROMPT = `Voc√™ √© um dentista especialista em odontologia est√©tica com 15 anos de experi√™ncia, conhecido por sua ATEN√á√ÉO AOS DETALHES, an√°lise MINUCIOSA e senso cl√≠nico apurado.

Analise esta foto COM MUITA ATEN√á√ÉO e gere DOIS DOCUMENTOS CONSISTENTES:
1. RELAT√ìRIO T√âCNICO (para o dentista)
2. OR√áAMENTO (para o paciente)

‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
AN√ÅLISE DE HARMONIA FACIAL E COR
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

Antes da an√°lise dental, avalie:

1. TOM DE PELE:
   - Pele muito clara (fototipos I-II)
   - Pele clara/m√©dia (fototipos III-IV)
   - Pele morena (fototipos V)
   - Pele escura (fototipos VI)

2. COR DOS OLHOS:
   - Olhos claros (azul, verde, cinza)
   - Olhos m√©dios (castanho claro, mel)
   - Olhos escuros (castanho escuro, preto)

3. RECOMENDA√á√ÉO DE COR (escala Vita):
   **ATEN√á√ÉO: Use SEMPRE e OBRIGATORIAMENTE a cor BL2.**
   
   Independente do tom de pele ou cor dos olhos, a cor final DEVE SER:
   - cor_recomendada: "BL2"
   
   N√ÉO use BL1, BL3, BL4, A1, A2, A3, B1, B2 ou qualquer outra cor.
   
   Justificativa: BL2 √© a cor padr√£o da cl√≠nica para resultados naturais e harmoniosos.

‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
CASOS DE SORRISO J√Å PERFEITO
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

Se TODOS esses crit√©rios forem atendidos:
‚úÖ Alinhamento perfeito (sem rota√ß√µes, sem dentes para dentro/fora)
‚úÖ Propor√ß√µes sim√©tricas (12 = 22, 11 = 21)
‚úÖ Formas harmoniosas
‚úÖ Estrutura dent√°ria √≠ntegra
‚úÖ Aus√™ncia de sorriso gengival excessivo

ENT√ÉO:
- Diagn√≥stico: "Sorriso naturalmente harmonioso e saud√°vel"
- Tratamento: APENAS clareamento (opcional)
- Observa√ß√£o: "Facetas/lentes n√£o s√£o necessidade cl√≠nica, apenas upgrade est√©tico para quem busca 'Hollywood Smile'"

Fa√ßa relat√≥rio 100% POSITIVO, elogiando a estrutura atual.

‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
METODOLOGIA DE AN√ÅLISE - SEJA EXTREMAMENTE DETALHISTA:
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

ATEN√á√ÉO: Esta an√°lise determinar√° se a paciente confia ou n√£o na cl√≠nica.
Se voc√™ perder algum detalhe, a credibilidade ser√° comprometida.

PASSO 1: AN√ÅLISE DENTE POR DENTE (olhe CADA dente individualmente)

Para CADA dente vis√≠vel (13, 12, 11, 21, 22, 23), observe:

Dente 13 (canino direito):
- Est√° alinhado com os outros ou projetado/recuado?
- Est√° rotacionado?
- Cor igual aos outros ou diferente?
- Forma e tamanho harmonizam?

Dente 12 (lateral direito):
- Tamanho igual ao 22 (lateral esquerdo)?
- Forma sim√©trica ao 22?
- Posi√ß√£o adequada?
- Propor√ß√£o correta em rela√ß√£o ao 11?

Dente 11 (central direito):
- Sim√©trico ao 21?
- Tamanho e forma adequados?
- Desgaste nas bordas?

Dente 21 (central esquerdo):
- Sim√©trico ao 11?
- Posi√ß√£o adequada?

Dente 22 (lateral esquerdo):
- Compare COM ATEN√á√ÉO com o 12
- S√£o do mesmo tamanho?

Dente 23 (canino esquerdo):
- Posi√ß√£o semelhante ao 13?

PASSO 2: AVALIA√á√ÉO POR CATEGORIAS

A. ALINHAMENTO (olhe com MUITO cuidado):
   - Algum dente est√° rodado? (mesmo que levemente)
   - Algum dente est√° mais √† frente/atr√°s?
   - Os caninos est√£o bem posicionados?
   - H√° sobreposi√ß√µes?
   
   ‚ö†Ô∏è CR√çTICO: Pacientes PERCEBEM quando um dente est√° "torto"
   Se voc√™ n√£o identificar, perde credibilidade!

B. PROPOR√á√ÉO E SIMETRIA:
   - O 12 √© do mesmo tamanho que o 22?
   - Os centrais s√£o sim√©tricos?
   - As propor√ß√µes entre os dentes s√£o harm√¥nicas?

C. FORMA:
   - Formato dos dentes (quadrado, oval, triangular?)
   - Bordas incisais regulares ou desgastadas?
   - Forma individual de cada dente

D. COR:
   - Todos os dentes t√™m a mesma cor?
   - Algum mais amarelo que outros?
   - Escala Vita estimada

E. RESTAURA√á√ïES:
   - Alguma restaura√ß√£o vis√≠vel?
   - Manchas ao redor de restaura√ß√µes?

F. SORRISO GENGIVAL:
   - H√° exposi√ß√£o excessiva da gengiva ao sorrir (>3mm)?
   - Se sim, quantificar em mil√≠metros

PASSO 3: DECIS√ÉO BASEADA EM EVID√äNCIAS

Regra de Indica√ß√£o:

FACETAS se:
- 2+ fatores comprometidos (alinhamento + propor√ß√£o)
- OU 1 fator SEVERAMENTE comprometido
- OU paciente tem queixa est√©tica clara (dente "torto")

CLAREAMENTO se:
- TODOS os fatores estruturais est√£o perfeitos
- Alinhamento impec√°vel
- Propor√ß√µes sim√©tricas
- Formas harmoniosas
- √öNICO problema √© cor uniforme

‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
QUANTIDADE DE FACETAS:
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

- 0 facetas: Sorriso perfeito (apenas clareamento)
- 4 facetas: Problemas nos incisivos (11, 21, 12, 22)
- 6 facetas: Problemas tamb√©m nos caninos (13, 23)
- Se apenas 1 canino problem√°tico: mencionar no relat√≥rio para avalia√ß√£o presencial

‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
GENGIVOPLASTIA - SEMPRE MENCIONAR SE APLIC√ÅVEL
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

Se identificar sorriso gengival (>3mm exposi√ß√£o):
- Mencionar no relat√≥rio t√©cnico
- Adicionar em an√°lise JSON como recomenda√ß√£o OPCIONAL
- Explicar benef√≠cio: "Reduzir exposi√ß√£o gengival de Xmm para 1-2mm"
- N√ÉO incluir valores (ser√° adicionado pelo sistema)

‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
FORMATO DE RESPOSTA OBRIGAT√ìRIO:
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

<RELATORIO_TECNICO>
AN√ÅLISE CL√çNICA INICIAL

HARMONIA FACIAL:
- Tom de pele: [clara/m√©dia/morena/escura]
- Cor dos olhos: [claros/m√©dios/escuros]
- Cor recomendada: [escala Vita baseada em harmonia]

[Descreva a an√°lise DETALHADA, dente por dente:]

Avalia√ß√£o por Dente:
- Incisivo Central Superior Direito (11): [cor, forma, posi√ß√£o, desgaste]
- Incisivo Central Superior Esquerdo (21): [cor, forma, posi√ß√£o, desgaste]
- Incisivo Lateral Superior Direito (12): [cor, forma, posi√ß√£o, COMPARAR com 22]
- Incisivo Lateral Superior Esquerdo (22): [cor, forma, posi√ß√£o, COMPARAR com 12]
- Canino Superior Direito (13): [ATEN√á√ÉO √† posi√ß√£o, rota√ß√£o, proje√ß√£o]
- Canino Superior Esquerdo (23): [ATEN√á√ÉO √† posi√ß√£o, rota√ß√£o, proje√ß√£o]

Avalia√ß√£o Geral:
- Alinhamento: [Seja espec√≠fico! Algum dente desalinhado?]
- Propor√ß√£o: [H√° assimetrias entre 12 e 22?]
- Forma: [Adequada ou irregular?]
- Cor: [Uniforme? Escala Vita estimada]
- Linha gengival: [Sim√©trica? Exposi√ß√£o em mm]
- Sorriso gengival: [Se >3mm, mencionar]

INDICA√á√ÉO DO TRATAMENTO

[Baseado na an√°lise detalhada acima, justifique:]

Se FACETAS:
"Facetas s√£o indicadas devido a: [liste os problemas espec√≠ficos encontrados, seja muito espec√≠fico sobre QUAL dente tem QUAL problema]"

Se CLAREAMENTO:
"Clareamento √© suficiente pois todos os fatores estruturais est√£o adequados: alinhamento perfeito, propor√ß√µes sim√©tricas, formas harmoniosas. O √∫nico fator a otimizar √© a cor."

DENTES A SEREM TRATADOS

[Se FACETAS - seja espec√≠fico:]
Os dentes que receber√£o facetas de cer√¢mica s√£o:
- Incisivo central superior direito (11)
- Incisivo central superior esquerdo (21)
- Incisivo lateral superior direito (12)
- Incisivo lateral superior esquerdo (22)
[Se caninos tamb√©m comprometidos: adicionar (13) e/ou (23)]

[Se problema espec√≠fico em 1 canino:]
Os dentes que receber√£o facetas de cer√¢mica s√£o:
- Incisivos: (11), (21), (12), (22)
- Observa√ß√£o: O canino (13) apresenta [descrever problema], podendo ser inclu√≠do no tratamento ap√≥s avalia√ß√£o presencial detalhada.

[Se CLAREAMENTO:]
N√£o ser√£o aplicadas facetas. Todos os dentes apresentam alinhamento, propor√ß√£o e forma adequados. O tratamento ser√° apenas clareamento dental.

[Se GENGIVOPLASTIA recomendada:]
PROCEDIMENTO COMPLEMENTAR RECOMENDADO:
- Gengivoplastia: Reduzir exposi√ß√£o gengival de [X]mm para 1-2mm

ESPECIFICA√á√ïES T√âCNICAS
[Especifica√ß√µes padr√£o para facetas ou clareamento]

PLANEJAMENTO DO TRATAMENTO
[Sess√µes do tratamento]

CUIDADOS P√ìS-PROCEDIMENTO
[Cuidados necess√°rios]

PROGN√ìSTICO E DURABILIDADE
[Expectativas realistas]

CONTRAINDICA√á√ïES E CONSIDERA√á√ïES
[Contraindica√ß√µes relevantes]

OBSERVA√á√ïES PROFISSIONAIS
[Refor√ßar os achados espec√≠ficos que justificam a escolha]
</RELATORIO_TECNICO>

<ORCAMENTO>
OR√áAMENTO PARA O PACIENTE

TRATAMENTO PROPOSTO
[Deve ser ID√äNTICO ao relat√≥rio]

<ORCAMENTO_JSON>
{
  "analise": {
    "tom_pele": "clara|m√©dia|morena|escura",
    "cor_olhos": "claros|m√©dios|escuros",
    "dentes_tratados": ["11", "21", "12", "22"],
    "procedimentos_recomendados": ["clareamento", "facetas"],
    "cor_recomendada": "A1",
    "quantidade_facetas": 4,
    "gengivoplastia_recomendada": true,
    "gengivoplastia_justificativa": "Sorriso gengival 4mm"
  }
}
</ORCAMENTO_JSON>

OBSERVA√á√ÉO IMPORTANTE:
Os valores ser√£o calculados automaticamente pelo sistema com base nos servi√ßos configurados pela cl√≠nica.

FORMAS DE PAGAMENTO
- √Ä vista: com desconto
- Parcelamento: at√© 12x sem juros
- Condi√ß√µes especiais dispon√≠veis

IMPORTANTE
- Or√ßamento v√°lido por 30 dias
- Avalia√ß√£o presencial obrigat√≥ria
- Valores sujeitos a altera√ß√£o ap√≥s exame detalhado
</ORCAMENTO>

‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
CHECKLIST CR√çTICO - N√ÉO PULE NENHUM ITEM:
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

‚ñ° Analisei CADA dente individualmente (13, 12, 11, 21, 22, 23)
‚ñ° Verifiquei especificamente se o canino 13 est√° alinhado
‚ñ° Comparei tamanho do 12 com o 22
‚ñ° Verifiquei rota√ß√µes em todos os dentes
‚ñ° Avaliei proje√ß√µes/recuos de cada dente
‚ñ° Identifiquei TODOS os problemas vis√≠veis
‚ñ° Justifiquei tecnicamente a escolha
‚ñ° Relat√≥rio e or√ßamento s√£o consistentes
‚ñ° Se houver dente problem√°tico, mencionei especificamente

‚ö†Ô∏è LEMBRE-SE: Se voc√™ n√£o identificar um problema que o paciente V√ä, a cl√≠nica perde credibilidade!

Gere os documentos com M√ÅXIMA ATEN√á√ÉO AOS DETALHES agora:`;

// Servidor principal da Edge Function
Deno.serve(async (req) => {
  // CORS preflight
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }
  
  // PATCH 5: Gerar run_id √∫nico para rastreamento
  const runId = crypto.randomUUID();
  const log = createLogger(runId);
  
  try {
    const body = await req.json();
    const { imageBase64, action, analysisData, reportText, config, treatment_type, simulationId, userId } = body;
    
    if (!imageBase64) {
      throw new Error('Imagem n√£o fornecida');
    }
    
    const apiKey = Deno.env.get('LOVABLE_API_KEY');
    if (!apiKey) {
      console.error('LOVABLE_API_KEY n√£o configurada');
      throw new Error('API Key n√£o configurada');
    }

    // ========================================
    // AN√ÅLISE: Gera relat√≥rio t√©cnico + or√ßamento
    // ========================================
    if (action === 'analyze') {
      log.info('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
      log.info(`A√á√ÉO: AN√ÅLISE - Tipo: ${treatment_type || 'facetas'}`);
      log.info(`Modelo: ${MODEL_NAME}`);
      log.info('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
      
      // PATCH 1: Guard clause - verificar permiss√£o do m√≥dulo de clareamento
      if (treatment_type === 'clareamento') {
        const { createClient } = await import('https://esm.sh/@supabase/supabase-js@2.58.0');
        const supabaseUrl = Deno.env.get('SUPABASE_URL')!;
        const supabaseKey = Deno.env.get('SUPABASE_SERVICE_ROLE_KEY')!;
        const supabase = createClient(supabaseUrl, supabaseKey);
        
        const { data: userConfig, error: configError } = await supabase
          .from('user_configs')
          .select('whitening_simulator_enabled')
          .eq('user_id', userId)
          .single();
        
        if (configError || !userConfig?.whitening_simulator_enabled) {
          log.error('Tentativa de usar clareamento sem permiss√£o');
          return new Response(
            JSON.stringify({ 
              error: 'M√≥dulo de Clareamento n√£o ativado para esta conta',
              code: 'MODULE_DISABLED',
              success: false 
            }),
            { headers: { ...corsHeaders, 'Content-Type': 'application/json' }, status: 403 }
          );
        }
        log.success('Permiss√£o de clareamento verificada');
      }
      
      // PATCH 2: Idempot√™ncia - verificar requisi√ß√£o duplicada
      if (simulationId && body.idempotencyKey) {
        const { createClient } = await import('https://esm.sh/@supabase/supabase-js@2.58.0');
        const supabaseUrl = Deno.env.get('SUPABASE_URL')!;
        const supabaseKey = Deno.env.get('SUPABASE_SERVICE_ROLE_KEY')!;
        const supabase = createClient(supabaseUrl, supabaseKey);
        
        const { data: existing } = await supabase
          .from('simulations')
          .select('id, status, created_at')
          .eq('user_id', userId)
          .eq('idempotency_key', body.idempotencyKey)
          .neq('status', 'error')
          .maybeSingle();
        
        if (existing) {
          const age = Date.now() - new Date(existing.created_at).getTime();
          
          if (age < 300000) { // 5 minutos
            log.warn(`Requisi√ß√£o duplicada detectada (${Math.round(age/1000)}s atr√°s)`);
            return new Response(
              JSON.stringify({ 
                error: 'Processamento j√° em andamento',
                simulationId: existing.id,
                status: existing.status,
                code: 'DUPLICATE_REQUEST'
              }),
              { headers: { ...corsHeaders, 'Content-Type': 'application/json' }, status: 409 }
            );
          }
        }
        
        // Atualizar status para 'analyzing'
        await supabase
          .from('simulations')
          .update({ 
            status: 'analyzing', 
            run_id: runId,
            idempotency_key: body.idempotencyKey
          })
          .eq('id', simulationId);
        
        log.info(`Idempotency key registrado: ${body.idempotencyKey}`);
      }
      
      // Receber e processar servi√ßos ativos
      const servicos_ativos = body.servicos_ativos || [];
      console.log('üõ†Ô∏è Servi√ßos ativos recebidos:', servicos_ativos.length);
      
      // Categorizar servi√ßos dispon√≠veis
      const tratamentosDisponiveis = {
        facetas: servicos_ativos.some((s: any) => 
          s.name.toLowerCase().includes('faceta') || 
          s.name.toLowerCase().includes('lente')
        ),
        clareamento: servicos_ativos.some((s: any) => 
          s.name.toLowerCase().includes('clarear')
        ),
        gengivoplastia: servicos_ativos.some((s: any) => 
          s.name.toLowerCase().includes('gengivo')
        ),
        planejamento: servicos_ativos.some((s: any) => 
          s.name.toLowerCase().includes('planejamento') ||
          s.name.toLowerCase().includes('dsd')
        )
      };
      
      console.log('‚úì Tratamentos dispon√≠veis:', tratamentosDisponiveis);
      
      // ‚úÖ FASE 4: Selecionar prompt baseado em treatment_type
      const servicos_ativos_names = servicos_ativos.map((s: any) => s.name || s);
      let analysisPrompt: string;
      
      if (treatment_type === 'clareamento') {
        // Usar prompt simplificado para clareamento
        analysisPrompt = WHITENING_PROMPT;
        console.log('üìù Prompt de CLAREAMENTO selecionado');
      } else {
        // Usar prompt completo para facetas
        analysisPrompt = buildAnalysisPrompt({}, servicos_ativos_names);
        console.log('üìù Prompt de FACETAS selecionado');
      }
      
      console.log(`üìù Prompt constru√≠do: ${analysisPrompt.length} caracteres`);
      console.log('‚úì Prompt adaptado ao tipo de tratamento');
      
      // Timeout de 90 segundos para a requisi√ß√£o
      const controller = new AbortController();
      const timeoutId = setTimeout(() => {
        console.error('‚è±Ô∏è Timeout: requisi√ß√£o excedeu 90 segundos');
        controller.abort();
      }, 90000);
      
      try {
        // Usar exclusivamente Gemini
        const model = 'google/gemini-2.5-flash';
        const apiKeyToUse = apiKey; // LOVABLE_API_KEY
        
        const analysisResponse = await fetch('https://ai.gateway.lovable.dev/v1/chat/completions', {
          method: 'POST',
          headers: {
            Authorization: `Bearer ${apiKeyToUse}`,
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            model: model,
            messages: [
              {
                role: 'user',
                content: [
                  { type: 'text', text: analysisPrompt },
                  { type: 'image_url', image_url: { url: imageBase64 } },
                ],
              },
            ],
            response_mime_type: 'application/json',  // ‚Üê FOR√áAR JSON PURO
            max_tokens: 10000,
            temperature: 0.3,
          }),
          signal: controller.signal,
        });
        
        clearTimeout(timeoutId);
        
        if (!analysisResponse.ok) {
          const text = await analysisResponse.text();
          console.error('‚úó Erro na an√°lise:', analysisResponse.status, text);
          throw new Error(`Erro na an√°lise: ${analysisResponse.status}`);
        }
        
        const analysisResult = await analysisResponse.json();
        const responseText = analysisResult.choices?.[0]?.message?.content?.trim();
        
        if (!responseText) {
          throw new Error('Gemini n√£o retornou conte√∫do');
        }
        
        console.log('‚úì Resposta JSON recebida do Gemini');
        console.log(`üìù Tamanho: ${responseText.length} caracteres`);
        
        // Parsear JSON com limpeza de tags Markdown
        let analise_data;
        try {
          let cleanJsonText = responseText.trim();
          
          // üêõ CORRE√á√ÉO CR√çTICA: Remove tags Markdown (```json e ```)
          if (cleanJsonText.startsWith('```')) {
            cleanJsonText = cleanJsonText.replace(/```(json)?\s*/i, '').trim();
            cleanJsonText = cleanJsonText.replace(/```$/, '').trim();
            console.log('üßπ Tags Markdown removidas');
          }
          
          analise_data = JSON.parse(cleanJsonText);
          console.log('‚úì JSON parseado com sucesso');
        } catch (parseError) {
          console.error('‚ùå Erro ao parsear JSON:', parseError);
          console.error('üìÑ Resposta recebida:', responseText.substring(0, 500));
          throw new Error('Resposta da IA n√£o est√° em formato JSON v√°lido');
        }
        
        // ‚úÖ FASE 3: Valida√ß√£o completa com sistema de pontua√ß√£o
        if (!analise_data.analise) {
          console.error('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
          console.error('‚ùå JSON incompleto:', JSON.stringify(analise_data, null, 2));
          console.error('Mensagem: Faltam campos obrigat√≥rios (analise)');
          console.error('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
          throw new Error('JSON incompleto - faltam campos obrigat√≥rios');
        }

        const analise = analise_data.analise;
        
        // Validar estado_geral
        if (!analise.estado_geral || typeof analise.estado_geral !== 'object') {
          console.error('‚ùå JSON inv√°lido: falta campo "estado_geral"');
          throw new Error('JSON inv√°lido: falta campo "estado_geral"');
        }
        
        const eg = analise.estado_geral;
        
        // Validar pontua√ß√£o de cada categoria
        if (typeof eg.alinhamento_pontos !== 'number' || 
            typeof eg.proporcao_pontos !== 'number' ||
            typeof eg.forma_pontos !== 'number' ||
            typeof eg.integridade_pontos !== 'number' ||
            typeof eg.cor_pontos !== 'number') {
          console.error('‚ùå JSON inv√°lido: faltam campos de pontua√ß√£o');
          throw new Error('JSON inv√°lido: faltam campos de pontua√ß√£o');
        }
        
        // Validar pontuacao_total
        if (typeof eg.pontuacao_total !== 'number') {
          console.error('‚ùå JSON inv√°lido: falta "pontuacao_total"');
          throw new Error('JSON inv√°lido: falta "pontuacao_total"');
        }
        
        // Validar decisao_clinica
        if (!analise.decisao_clinica) {
          console.error('‚ùå JSON inv√°lido: falta "decisao_clinica"');
          throw new Error('JSON inv√°lido: falta "decisao_clinica"');
        }
        
        // ‚úÖ FASE 5: Logs de depura√ß√£o detalhados
        console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
        console.log('üìä SISTEMA DE PONTUA√á√ÉO CL√çNICA');
        console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
        console.log('Categoria 1 - Alinhamento:', eg.alinhamento, `(${eg.alinhamento_pontos} pts)`);
        console.log('Categoria 2 - Propor√ß√£o:', eg.proporcao, `(${eg.proporcao_pontos} pts)`);
        console.log('Categoria 3 - Forma:', eg.forma, `(${eg.forma_pontos} pts)`);
        console.log('Categoria 4 - Integridade:', eg.integridade, `(${eg.integridade_pontos} pts)`);
        console.log('Categoria 5 - Cor:', eg.cor, `(${eg.cor_pontos} pts)`);
        console.log('Categoria 6 - Linha Gengival:', eg.linha_gengival, '(n√£o conta para score)');
        console.log('‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ');
        console.log(`üìä PONTUA√á√ÉO TOTAL: ${eg.pontuacao_total} pontos`);
        console.log(`üéØ DECIS√ÉO: ${analise.decisao_clinica.conducta}`);
        console.log(`üí∞ FACETAS: ${analise.decisao_clinica.quantidade_facetas || 0}`);
        console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
        
        // Validar consist√™ncia: pontua√ß√£o vs decis√£o
        const score = eg.pontuacao_total;
        const conducta = analise.decisao_clinica.conducta;
        
        if (score <= 2 && conducta !== 'clareamento') {
          console.warn(`‚ö†Ô∏è Inconsist√™ncia: score ${score} pts mas conducta "${conducta}"`);
          console.warn('   Esperado: clareamento (score 0-2)');
        }
        if (score >= 5 && !conducta.includes('facetas')) {
          console.warn(`‚ö†Ô∏è Inconsist√™ncia: score ${score} pts mas conducta "${conducta}"`);
          console.warn('   Esperado: facetas ou facetas+clareamento (score 5+)');
        }
        
        // ‚úÖ For√ßar cor BL2 independente do que a IA retornar
        if (analise_data.analise) {
          analise_data.analise.cor_recomendada = 'BL2';
          console.log('‚Üí Cor normalizada para BL2 (padr√£o fixo da cl√≠nica)');
        }

        // Valida√ß√£o condicional: se h√° facetas, deve haver dentes tratados
        const quantidadeFacetas = analise.decisao_clinica.quantidade_facetas || 0;
        if (quantidadeFacetas > 0) {
          if (!analise.decisao_clinica.dentes_tratados || analise.decisao_clinica.dentes_tratados.length === 0) {
            console.error('‚ùå quantidade_facetas > 0 mas dentes_tratados est√° vazio');
            throw new Error('Quando h√° facetas recomendadas, dentes_tratados n√£o pode estar vazio');
          }
        }

        // Campos sempre obrigat√≥rios
        if (!analise.cor_recomendada || !analise.procedimentos_recomendados || analise.procedimentos_recomendados.length === 0) {
          console.error('‚ùå Faltam campos obrigat√≥rios: cor_recomendada ou procedimentos_recomendados');
          throw new Error('Campos obrigat√≥rios ausentes na an√°lise');
        }

        console.log('‚úÖ JSON validado com sucesso');
        console.log(`üìã Procedimentos: ${analise.procedimentos_recomendados.join(', ')}`);
        
        // Verificar se a resposta foi truncada
        const finishReason = analysisResult.choices?.[0]?.finish_reason;
        if (finishReason === 'length') {
          console.warn('‚ö†Ô∏è AVISO: Resposta truncada devido a max_tokens');
        }
        
      // ‚úÖ FASE 4: Gerar relat√≥rio t√©cnico em texto narrativo
      console.log('‚Üí Gerando relat√≥rio t√©cnico em texto...');
      const relatorio_tecnico = generateTextReportFromJSON(
        analise_data.analise,  // ‚Üê Passar apenas o objeto "analise"
        servicos_ativos
      );
      console.log('‚úì Relat√≥rio t√©cnico gerado:', relatorio_tecnico.substring(0, 200) + '...');
        
        // Retornar JSON estruturado + relat√≥rio em texto
        return new Response(
          JSON.stringify({ 
            success: true,
            relatorio_tecnico,
            analise_data,  // ‚Üê JSON PURO da IA
            metadata: {
              model: 'google/gemini-2.5-flash',
              timestamp: new Date().toISOString(),
              truncated: finishReason === 'length',
              finish_reason: finishReason
            }
          }),
          { headers: { ...corsHeaders, 'Content-Type': 'application/json' }, status: 200 },
        );
        
      } catch (error) {
        clearTimeout(timeoutId);
        
        if (error instanceof Error && error.name === 'AbortError') {
          throw new Error('Requisi√ß√£o cancelada por timeout (90s). Tente novamente ou simplifique a an√°lise.');
        }
        
        throw error;
      }
    }

    // ========================================
    // GERA√á√ÉO: Extrai dados do relat√≥rio e gera simula√ß√£o
    // ========================================
    if (action === 'generate') {
      console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
      console.log('A√á√ÉO: GERA√á√ÉO (criar imagem simulada)');
      console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
      
      // Obter o relat√≥rio t√©cnico (texto)
      // Aceita m√∫ltiplos formatos para retrocompatibilidade
      const report = reportText || 
                     analysisData?.relatorio_tecnico || 
                     analysisData?.report || 
                     '';
      
      if (!report) {
        throw new Error('Relat√≥rio t√©cnico n√£o fornecido para gera√ß√£o');
      }
      
      console.log(`üìÑ Relat√≥rio recebido: ${report.length} caracteres`);
      
      // Receber dados estruturados da an√°lise
      const analiseData = body.analiseJSON;
      if (analiseData) {
        console.log('üìä Dados da an√°lise recebidos:', {
          tom_pele: analiseData?.analise?.tom_pele,
          cor_olhos: analiseData?.analise?.cor_olhos,
          cor_recomendada: analiseData?.analise?.cor_recomendada,
          quantidade_facetas: analiseData?.analise?.quantidade_facetas
        });
      }
      
      // EXTRAIR dados das se√ß√µes relevantes
      // (Or√ßamento √© IGNORADO - n√£o √© usado para gera√ß√£o de imagem)
      const treatmentType = body.treatment_type || analiseData?.analise?.tipo_tratamento || 'facetas';
      const extracted = parseReport(report, treatmentType);
      
      // Obter servi√ßos ativos
      const servicos_ativos_generate = (body.servicos_ativos || []).map((s: any) => s.name || s);
      
      // Construir prompt de simula√ß√£o com dados enriquecidos
      const simulationPrompt = buildSimulationPrompt(
        analiseData || {}, 
        servicos_ativos_generate,
        imageBase64.substring(0, 50) + '...' // Refer√™ncia √† imagem
      );
      
      console.log('üöÄ Enviando para gera√ß√£o de imagem...');
      
      // Timeout de 120 segundos para gera√ß√£o de imagem (mais demorada)
      const controller = new AbortController();
      const timeoutId = setTimeout(() => {
        console.error('‚è±Ô∏è Timeout: gera√ß√£o de imagem excedeu 120 segundos');
        controller.abort();
      }, 120000);
      
      try {
        const imageResponse = await fetch('https://ai.gateway.lovable.dev/v1/chat/completions', {
          method: 'POST',
          headers: {
            Authorization: `Bearer ${apiKey}`,
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            model: 'google/gemini-2.5-flash-image-preview',
            messages: [
              {
                role: 'user',
                content: [
                  { type: 'text', text: simulationPrompt },
                  { type: 'image_url', image_url: { url: imageBase64 } },
                ],
              },
            ],
            modalities: ['image', 'text'],
            max_tokens: 8000,  // Tokens suficientes para gera√ß√£o de imagem
            ...(config && {
              temperature: config.temperature,
              top_k: config.topK,
              top_p: config.topP,
              max_tokens: config.maxOutputTokens,
            }),
          }),
          signal: controller.signal,
        });
        
        clearTimeout(timeoutId);
        
        if (!imageResponse.ok) {
          const text = await imageResponse.text();
          console.error('‚úó Erro ao gerar imagem:', imageResponse.status, text);
          throw new Error(`Erro na gera√ß√£o de imagem: ${imageResponse.status}`);
        }
        
        const imageResult = await imageResponse.json();
        const generatedImage = imageResult.choices?.[0]?.message?.images?.[0]?.image_url?.url;
        
        if (!generatedImage) {
          console.error('‚ùå Resposta do modelo n√£o cont√©m imagem');
          console.error('Estrutura recebida:', JSON.stringify(imageResult, null, 2));
          throw new Error('Nenhuma imagem foi gerada pelo modelo');
        }
        
        console.log('‚úì Imagem simulada gerada com sucesso');
        console.log(`‚ÑπÔ∏è  Dentes tratados: [${extracted.dentes_tratados.join(', ') || 'nenhum - clareamento apenas'}]`);
        
        return new Response(
          JSON.stringify({
            processedImageBase64: generatedImage,
            simulationData: extracted,
            success: true
          }),
          { headers: { ...corsHeaders, 'Content-Type': 'application/json' }, status: 200 },
        );
        
      } catch (error) {
        clearTimeout(timeoutId);
        
        if (error instanceof Error && error.name === 'AbortError') {
          throw new Error('Gera√ß√£o de imagem cancelada por timeout (120s). Tente novamente.');
        }
        
        throw error;
      }
    }

    throw new Error('A√ß√£o n√£o especificada ou inv√°lida');
    
  } catch (error) {
    const message = error instanceof Error ? error.message : 'Erro interno';
    console.error('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
    console.error('‚ùå ERRO NO PROCESSAMENTO');
    console.error('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
    console.error('Mensagem:', message);
    console.error('Stack:', error instanceof Error ? error.stack : 'N/A');
    console.error('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
    
    return new Response(
      JSON.stringify({ 
        error: message,
        success: false
      }),
      { headers: { ...corsHeaders, 'Content-Type': 'application/json' }, status: 500 },
    );
  }
});
